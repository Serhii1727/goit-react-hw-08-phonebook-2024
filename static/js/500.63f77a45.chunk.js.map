{"version":3,"file":"static/js/500.63f77a45.chunk.js","mappings":"yOACA,EAAuB,0BAAvB,EAAyD,2BAAzD,EAAkG,iCAAlG,EAA2I,2BAA3I,EAA+K,4B,mBCMhK,SAASA,IACtB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA2BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhCE,EAAKD,EAAA,GAAEE,EAASF,EAAA,GACfG,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAAzBF,SACFG,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACxB,IAAAC,EAAwBD,EAAME,cAAtBd,EAAIa,EAAJb,KAAMe,EAAKF,EAALE,MAED,SAATf,GACFC,EAAQc,GAGG,WAATf,GACFK,EAAUU,EAEd,EAmBMC,EAAiB,WACrBf,EAAQ,IACRI,EAAU,GACZ,EAEA,OACEY,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAUC,SAvBR,SAAAR,GAOnB,GANAA,EAAMS,iBAEgBf,EAASgB,MAAMC,MACnC,SAAAC,GAAO,OAAIA,EAAQxB,KAAKyB,gBAAkBzB,EAAKyB,aAAa,IAM5D,OAFAT,SACAU,MAAM,GAADC,OAAI3B,EAAI,4BAIfS,GAASmB,EAAAA,EAAAA,IAAW,CAAE5B,KAAAA,EAAMI,MAAAA,EAAOyB,IAAIC,EAAAA,EAAAA,SACvCd,GACF,EAQoDe,SAAA,EAChDd,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAUY,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,QAAMd,UAAWC,EAAgBY,SAAC,UAClCC,EAAAA,EAAAA,KAAA,SACEC,SAAUtB,EACVO,UAAWC,EACXe,KAAK,OACLlC,KAAK,OACLe,MAAOf,EACPmC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZpB,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAUY,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,QAAMd,UAAWC,EAAgBY,SAAC,YAClCC,EAAAA,EAAAA,KAAA,SACEC,SAAUtB,EACVO,UAAWC,EACXe,KAAK,MACLlC,KAAK,SACLe,MAAOX,EACP+B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZL,EAAAA,EAAAA,KAAA,UAAQE,KAAK,SAAShB,UAAWC,EAAWY,SAAC,kBAKnD,C,gICjFO,IAAMvB,EAAiB,SAAA8B,GAC5B,OAAOA,EAAMhC,QACf,EAMaiC,EAAgB,SAAAD,GAC3B,OAAOA,EAAMhC,SAASA,SAASkC,SACjC,EAEaC,EAAc,SAAAH,GACzB,OAAOA,EAAMhC,SAASA,SAASoC,KACjC,EAEaC,EAAe,SAAAL,GAC1B,OAAOA,EAAMM,MACf,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"label__name\":\"ContactForm_label__name__VZfQ+\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"button__text\":\"ContactForm_button__text__Sx7Gr\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/selectors';\nimport { addContact } from '../../redux/operations';\nimport css from './ContactForm.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n  const { contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeInput = event => {\n    const { name, value } = event.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isContactName = contacts.items.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isContactName) {\n      resetInputForm();\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, phone, id: nanoid() }));\n    resetInputForm();\n  };\n\n  const resetInputForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        <span className={css.label__name}>Name</span>\n        <input\n          onChange={handleChangeInput}\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label}>\n        <span className={css.label__name}>Number</span>\n        <input\n          onChange={handleChangeInput}\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={phone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","export const selectContacts = state => {\n  return state.contacts;\n};\n\nexport const selectItems = state => {\n  return state.contacts.contacts.items;\n};\n\nexport const selectLoading = state => {\n  return state.contacts.contacts.isLoading;\n};\n\nexport const selectError = state => {\n  return state.contacts.contacts.error;\n};\n\nexport const selectFilter = state => {\n  return state.filter;\n};\n"],"names":["ContactForm","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","handleChangeInput","event","_event$currentTarget","currentTarget","value","resetInputForm","_jsxs","className","css","onSubmit","preventDefault","items","some","contact","toLowerCase","alert","concat","addContact","id","nanoid","children","_jsx","onChange","type","pattern","title","required","state","selectLoading","isLoading","selectError","error","selectFilter","filter"],"sourceRoot":""}